#!/usr/bin/env bash
# This script was generated by bashly 1.2.7 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
zxz_usage() {
  printf "zxz - a CLI to interact with <https://0x0.st/>.\n\n"

  printf "%s\n" "Usage:"
  printf "  zxz COMMAND\n"
  printf "  zxz [COMMAND] --help | -h\n"
  printf "  zxz --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Upload FILE. (default)\n" "upload"
  printf "  %s   List the files you already uploaded.\n" "list  "
  printf "  %s   Delete an uploaded file from the remote server.\n" "delete"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "ZXZ_LOG_FILE"
    printf "    Path to the log file.\n"
    printf "    %s\n" "Default: ${LOG_DIR}/uploads.log"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  The most simple usage is when you just want to upload a file:\n  $ zxz <filename>\n"
    echo

    # :command.footer
    printf "Credits:\n  zxz repository: <https://github.com/meleu/zxz>\n\n  The <https://0x0.st/> is a service maintained by Mia Herkt,\n  consider supporting them financially (check the webpage).\n\n"
    echo

  fi
}

# :command.usage
zxz_upload_usage() {
  printf "zxz upload - Upload FILE.\n\n"
  printf "Alias: up, u\n"
  echo

  printf "%s\n" "Usage:"
  printf "  zxz [upload] FILE [OPTIONS]\n"
  printf "  zxz upload --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--secret, -s"
    printf "    Ask the server to generate a longer and hard-to-guess URL.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--server, -S SERVER"
    printf "    Upload to a custom 0x0 instance server.\n"
    printf "    %s\n" "Default: https://0x0.st/"
    echo

    # :flag.usage
    printf "  %s\n" "--copy-url, -c"
    printf "    After successfully uploading the file, copy the URL to clipboard.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--retention-hours, -r RETENTION_HOURS"
    printf "    Set the amount of hours you want the file to be available.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "FILE"
    printf "    file to upload (max file size: 512MB).\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  zxz upload <filename>\n"
    printf "  zxz upload <filename> --secret\n"
    printf "  zxz upload <filename> --server https://<custom-0x0-instance>\n"
    echo

  fi
}

# :command.usage
zxz_list_usage() {
  printf "zxz list - List the files you already uploaded.\n\n"
  printf "Alias: ls, l\n"
  echo

  printf "%s\n" "Usage:"
  printf "  zxz list [OPTIONS]\n"
  printf "  zxz list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--update, -u"
    printf "    Update the list of uploaded files removing the unavailable ones.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--browser, -b"
    printf "    Pick a file from the list and open in your browser.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--copy-url, -c"
    printf "    Pick a file from the list and copy URL to clipboard.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zxz_delete_usage() {
  printf "zxz delete - Delete an uploaded file from the remote server.\n\n"
  printf "Alias: del, d\n"
  echo

  printf "%s\n" "Usage:"
  printf "  zxz delete\n"
  printf "  zxz delete --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/custom_commands.sh
cmd_curl() {
  cmd_gum_spin \
    "Sending HTTP request..." \
    curl --silent --user-agent "$USER_AGENT" \
    "$@"
}

cmd_gum_spin() {
  local message="$1"
  shift
  local command=("$@")

  gum spin \
    --title "$message" \
    --spinner points \
    --show-output \
    -- "${command[@]}"
}

# src/lib/delete_functions.sh
delete_command() {
  local chosen_url
  local token

  printf "\nChoose the file to be deleted:\n\n"

  # get the url and the token
  chosen_url="$(pick_url_from_log)" || return $?
  token="$(get_url_token_from_log "${chosen_url}")"
  if [[ -z "$token" ]]; then
    echo "[error] Unable to get the X-Token for $chosen_url"
    return 1
  fi

  cmd_curl \
    --output /dev/null \
    --form token="$token" \
    --form delete= \
    "$chosen_url"

  confirm_url_available "$chosen_url" \
    || remove_url_from_log "$chosen_url"
}

confirm_url_available() {
  local url="$1"
  local response_status

  response_status="$(url_http_status "$url")"

  case "$response_status" in
    200)
      echo "- <$url>: is still available." >&2
      return 0
      ;;
    404)
      echo "- <$url>: resource deleted/not-found (HTTP status ${response_status})." >&2
      ;;
    '')
      echo "- <$url>: failed to get the HTTP status." >&2
      ;;
    *)
      echo "- <$url>: returned HTTP status ${response_status}." >&2
      ;;
  esac

  return 1
}

# Returns true if a request to the given URL returns 404 HTTP status,
# otherwise returns false.
url_http_status() {
  local url="$1"

  # getting only the headers and getting the http status code
  cmd_curl --head "$url" \
    | head -1 \
    | cut -d' ' -f2
}

# src/lib/list_functions.sh
pick_and_copy_url() {
  local url
  url="$(pick_url_from_log)" \
    && copy_to_clipboard "$url" \
    && echo "Copied to clipboard: $url" >&2
}

pick_and_open_url() {
  local url
  url="$(pick_url_from_log)" && open_browser "$url"
}

open_browser() {
  case "$OSTYPE" in
    darwin*)
      open "$1"
      ;;
    *) # Hopefully Linux
      xdg-open "$1"
      ;;
  esac
}

copy_to_clipboard() {
  case "$OSTYPE" in
    darwin*)
      echo -n "$1" | pbcopy
      ;;
    *) # Hopefully Linux
      echo -n "$1" | xclip -selection clipboard
      ;;
  esac
}

# src/lib/log_file_operations.sh
create_log_file() {
  echo "file;url;token;uploaded_at;expiration_time" > "$ZXZ_LOG_FILE"
}

log_uploaded_file() {
  local header_file="$1"
  local file="$2"
  local url="$3"

  already_logged "$file" "$url" && return

  local token
  local expiration_ms
  local expiration_seconds
  local expiration_time
  local date_format="%Y-%m-%d %H:%M:%S %z"

  token="$(get_http_header_value "$header_file" "X-Token")"
  [[ -z "$token" ]] && echo "[warning] Unable to get the X-Token for this file." >&2

  expiration_ms="$(get_http_header_value "$header_file" "X-Expires")"

  expiration_seconds="$((expiration_ms / 1000))"
  expiration_time="$(date -d "@$expiration_seconds" +"$date_format")"
  uploaded_at="$(date +"$date_format")"

  echo "${file};${url};${token};${uploaded_at};${expiration_time}" >> "$ZXZ_LOG_FILE"
}

already_logged() {
  local file="$1"
  local url="$2"
  grep -qF "${file};${url}" "$ZXZ_LOG_FILE"
}

remove_url_from_log() {
  local url="$1"
  # shellcheck disable=2155
  local temp_file="$(mktemp)"

  grep -vF ";${url};" "$ZXZ_LOG_FILE" > "$temp_file" \
    && mv -f "$temp_file" "$ZXZ_LOG_FILE"
}

print_uploaded_files() {
  pick_log_line --print
}

# Show the following information about uploaded files:
# - filename
# - url
# - uploaded_at
# - expiration_time
# Arguments given to this function are passed to `gum table`
pick_log_line() {
  # CSV format is:
  # filename; url; token; uploaded_at; expiration_time
  cut -d';' -f1-2,4,5 "$ZXZ_LOG_FILE" \
    | gum table \
      --separator=';' \
      --height 10 \
      --border=rounded \
      --widths=20,48,25 \
      "$@"
}

pick_url_from_log() {
  local log_line

  log_line="$(pick_log_line)"
  if [[ -z $log_line ]]; then
    echo "selection aborted" >&2
    return 1
  fi
  cut -d';' -f2 <<< "$log_line"
}

get_url_token_from_log() {
  local url="$1"
  grep -F ";$url;" "$ZXZ_LOG_FILE" | cut -d';' -f3
}

update_log_file() {
  local url

  while IFS= read -r url; do
    # TODO: if $url is an empty string, remove the line from the log
    [[ -z "$url" ]] && warn_corrupted_log_file && continue
    confirm_url_available "$url" \
      || remove_url_from_log "$url"
  done <<< "$(tail -n +2 "$ZXZ_LOG_FILE" | cut -d';' -f2)"
}

warn_corrupted_log_file() {
  echo "[warning] The log file is corrupted (check it at ${ZXZ_LOG_FILE})" >&2
}

# Get the HTTP header value from the file generated by `curl --dump-header`
get_http_header_value() {
  local file="$1"
  local header_name="$2"
  local header_value
  local line

  while IFS= read -r line || [[ -n "$line" ]]; do
    [[ "$line" != "${header_name}: "* ]] && continue
    header_value="${line#"$header_name: "}"
    header_value="${header_value%$'\r'}" # remove trailing '\r'
  done < "$file"

  echo "$header_value"
}

# src/lib/upload_functions.sh
upload_command() {
  [[ -z "$1" ]] && return 1

  local file="$1"
  local host="$2"
  local is_secret="${ARGS[--secret]}"
  local retention_hours="${ARGS['--retention-hours']}"

  # shellcheck disable=2155
  local response_header_file="$(mktemp)"
  local curl_args=(
    --dump-header "$response_header_file"
    --form "file=@$file"
  )
  local uploaded_file_url

  [[ "$is_secret" == 1 ]] && curl_args+=(--form secret=)
  [[ "$retention_hours" -gt 0 ]] && curl_args+=(--form expires="$retention_hours")

  uploaded_file_url="$(cmd_curl "${curl_args[@]}" "$host")"
  if [[ -z "$uploaded_file_url" ]]; then
    echo "Failed to upload file: $file" >&2
    return 1
  fi

  echo "$uploaded_file_url"
  [[ "${ARGS['--copy-url']}" == 1 ]] && copy_to_clipboard "$uploaded_file_url"

  log_uploaded_file "$response_header_file" "$file" "$uploaded_file_url"
  rm -f "$response_header_file"
}

# src/lib/validations/validate_file_exists.sh
validate_file_exists() {
  [[ -f "$1" ]] || echo "must be an existing file"
}

# src/lib/validations/validate_http_url.sh
validate_http_url() {
  local regex_http_url="^https?://[^[:space:]/$.?#].[^[:space:]]*$"
  [[ $1 =~ $regex_http_url ]] || echo "must be a valid http URL"
}

# src/lib/validations/validate_integer.sh
validate_integer() {
  [[ "$1" =~ ^[0-9]+$ ]] || echo "must be an integer"
}

# :command.command_functions
# :command.function
zxz_upload_command() {

  # src/upload_command.sh
  upload_command "${ARGS[file]}" "${ARGS[--server]}"

}

# :command.function
zxz_list_command() {

  # src/list_command.sh
  if [[ "${ARGS['--copy-url']}" == 1 ]]; then
    pick_and_copy_url
    return
  fi

  if [[ "${ARGS['--browser']}" == 1 ]]; then
    pick_and_open_url
    return
  fi

  [[ "${ARGS['--update']}" == 1 ]] && update_log_file

  print_uploaded_files

}

# :command.function
zxz_delete_command() {

  # src/delete_command.sh
  delete_command

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        zxz_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter
  # :command.environment_variables_default
  export ZXZ_LOG_FILE="${ZXZ_LOG_FILE:-${LOG_DIR}/uploads.log}"

  env_var_names+=("ZXZ_LOG_FILE")

  # :command.dependencies_filter
  missing_deps=
  # :dependency.filter
  if ! command -v curl >/dev/null 2>&1; then
    printf "missing dependency: curl\n" >&2
    missing_deps=1
  else
    deps['curl']="$(command -v curl | head -n1)"
  fi

  # :dependency.filter
  if ! command -v gum >/dev/null 2>&1; then
    printf "missing dependency: gum\n" >&2
    missing_deps=1
  else
    deps['gum']="$(command -v gum | head -n1)"
  fi

  # :dependency.filter
  if ! command -v cut >/dev/null 2>&1; then
    printf "missing dependency: cut\n" >&2
    missing_deps=1
  else
    deps['cut']="$(command -v cut | head -n1)"
  fi

  # :dependency.filter
  if ! command -v date >/dev/null 2>&1; then
    printf "missing dependency: date\n" >&2
    missing_deps=1
  else
    deps['date']="$(command -v date | head -n1)"
  fi

  # :dependency.filter
  if ! command -v grep >/dev/null 2>&1; then
    printf "missing dependency: grep\n" >&2
    missing_deps=1
  else
    deps['grep']="$(command -v grep | head -n1)"
  fi

  if [[ -n $missing_deps ]]; then
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in

    upload | up | u)
      action="upload"
      shift
      zxz_upload_parse_requirements "$@"
      shift $#
      ;;

    list | ls | l)
      action="list"
      shift
      zxz_list_parse_requirements "$@"
      shift $#
      ;;

    delete | del | d)
      action="delete"
      shift
      zxz_delete_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      zxz_usage >&2
      exit 1
      ;;

    *)
      action="upload"
      zxz_upload_parse_requirements "$@"
      shift $#
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zxz_upload_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        zxz_upload_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="upload"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --secret | -s)

        # :flag.case_no_arg
        args['--secret']=1
        shift
        ;;

      # :flag.case
      --server | -S)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--server']="$2"
          shift
          shift
        else
          printf "%s\n" "--server requires an argument: --server, -S SERVER" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --copy-url | -c)

        # :flag.case_no_arg
        args['--copy-url']=1
        shift
        ;;

      # :flag.case
      --retention-hours | -r)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--retention-hours']="$2"
          shift
          shift
        else
          printf "%s\n" "--retention-hours requires an argument: --retention-hours, -r RETENTION_HOURS" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['file']+x} ]]; then
          args['file']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['file']+x} ]]; then
    printf "missing required argument: FILE\nusage: zxz [upload] FILE [OPTIONS]\n" >&2

    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['--server']:-} ]] || args['--server']="https://0x0.st/"

  # :command.validations
  # :argument.validations
  if [[ -v args['file'] && -n $(validate_file_exists "${args['file']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "FILE" "$(validate_file_exists "${args['file']:-}")" >&2
    exit 1
  fi

  # :flag.validations
  if [[ -v args['--server'] && -n $(validate_http_url "${args['--server']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "--server, -S SERVER" "$(validate_http_url "${args['--server']:-}")" >&2
    exit 1
  fi

  # :flag.validations
  if [[ -v args['--retention-hours'] && -n $(validate_integer "${args['--retention-hours']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "--retention-hours, -r RETENTION_HOURS" "$(validate_integer "${args['--retention-hours']:-}")" >&2
    exit 1
  fi

}

# :command.parse_requirements
zxz_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        zxz_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --update | -u)

        # :flag.case_no_arg
        args['--update']=1
        shift
        ;;

      # :flag.case
      --browser | -b)

        # :flag.case_no_arg
        args['--browser']=1
        shift
        ;;

      # :flag.case
      --copy-url | -c)

        # :flag.case_no_arg
        args['--copy-url']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zxz_delete_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        zxz_delete_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="delete"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.2"
  long_usage=''
  set -Eeo pipefail

  # :command.variables
  # :variable.definition
  declare -g USER_AGENT="zxz/$version - https://github.com/meleu/zxz"

  # :variable.definition
  declare -g LOG_DIR="${XDG_DATA_HOME:-${HOME}/.local/share}/zxz"

  # :command.environment_variables_default
  export ZXZ_LOG_FILE="${ZXZ_LOG_FILE:-${LOG_DIR}/uploads.log}"

  # :command.globals
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a env_var_names=()
  declare -g -a input=()

  declare -gn ARGS=args

  # src/initialize.sh
  [[ -d "$LOG_DIR" ]] || mkdir -p "$LOG_DIR"

  # if file does not exists or is empty, create it.
  if [[ ! -s "$ZXZ_LOG_FILE" ]]; then
    create_log_file
  fi

}

# :command.run
run() {
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "upload") zxz_upload_command ;;
    "list") zxz_list_command ;;
    "delete") zxz_delete_command ;;
  esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  initialize
  run "$@"
fi
